초기설정:
  
  git 계정설정:
    git config --global user.name "(이름)"
    git config --global user.email "(이메일)"

  확인하는법: 
    git config --global user.name
    git config --global user.email

  git init: .git 파일을 생성하고 git으로 관리하도록 초기화한다.
  ctrl + shift + . : 숨김파일 보기
  
.gitignore: 해당 파일에 파일명 혹은 경로를 넣을경우 git관리 대상에서 제외

git status: git 상태 확인

file add: 
  - 파일저장 업로드: git add 파git일명
  - 파일 일괄 업로드: git add .

git commit: 수정, 업로드한 파일 commit 
git commit -a: add와 commit을 같이
git commit -am (커밋 코멘트): add와 commit 후 코멘트를 남긴다
git log: commit 로그 확인

git diff: 변경된 파일의 차이점을 확인한다 

git reset --hard (돌아갈 커밋 ID): commit_id의 상태로 이동한다, commit_id 이후의 기록은 전부 삭제
git revert (돌아갈 커밋 ID): 돌아갈 커밋 ID 의 상태를 되돌리고 해당 기록을 새로운 commit으로 남김다
git revert --no-commit (돌아갈 커밋 ID): 돌아갈 커밋 ID의 상태로 되돌리면서 commit하기 전 상태가 된다. 현재 작업중인 파일과 같이 커밋할 때 사용

branch:
  - git branch [브랜치 명]: 브랜치 명의 브랜치 추가
  - git branch: 현재 브랜치 목록 확인
  - git switch [브랜치 명]: 브랜치 명의 브랜치로 전환
  - git switch -c [브랜치 명]: 브랜치 명의 브랜치 추가 후 해당 브랜치로 전환
  - git branch -d [브랜치 명]: 브랜치 명의 브랜치 삭제
  - git branch -m [변경 브랜치명] [변경할 이름]: 브랜치 명을 변경할 이름의 브랜치 명으로 변경

  - git log --all --decorate --oneline --graph: 그래프 형태로 로그 출력

branch add:
  - merge: 두개의 브랜치를 합쳐서 새로운 commit(히스토리 존재)
    - git merge [합칠 대상의 브랜치]: 합칠 대상의 브랜치를 현재 위치한 브랜치와 merge(합치기 위한 브랜치로 전환되어 있어야한다)
    - reset 가능
  - git merge --abort: merge를 중단하고 이전으로 돌아간다
  - rebase: 현재의 브랜치를 메인 브랜치에 이어 붙여서 commit(히스토리가 남지 않음)
    - git rebase [이동하려는 브랜치]: 
    - rebase 후 이동하려는 브랜치로 이동한 뒤 다시 git merge [합칠 대상의 브랜치] 작성
  - git rebase --abort: rebase를 중단하고 이전으로돌아간다
  - git rebase [이동하려는 브랜치]
  - git add .
  - git rebase --continue: 이후 다음 rebase 파일에 대한 작업 수행
  - rebase의 경우 건건히 파일 수정을 해줘야 하기 때문에 continue로 진행
  - 이후 이동하려는 브랜치로 이동후 merge 진행


원격: 
  - 원격주소 복사후 붙여넣기
  - git remote: 원격 주소지 
  - git remote -v: 원격 주소지 상세정보
  - git clone [git 주소]: git 내려받기
  - git push: 원격 주소지에 올리기
  - git pull: 원격 주소지에서 내려받기
